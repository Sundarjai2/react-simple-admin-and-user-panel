{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/sermasundarj/Desktop/rss/packages/react-client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/sermasundarj/Desktop/rss/packages/react-client/src/components/admincomponent/Edit.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n{\\n    user(id: \\\"5e142fd878849a08221947a1\\\"){\\n      name\\n    }\\n    \\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport { Link, withRouter } from \"react-router-dom\";\nimport gql from \"graphql-tag\";\nimport { Query, Mutation } from \"react-apollo\";\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport NativeSelect from '@material-ui/core/NativeSelect';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport { FormControl, FormControlLabel, Radio, RadioGroup } from \"@material-ui/core\";\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport Header from '../commoncomponent/header';\nimport Content from '../homecomponent/content';\nimport ContactUs from '../homecomponent/contactus';\nimport Footer from '../commoncomponent/footer';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  title: {\n    flexGrow: 1\n  },\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap'\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 240\n  }\n}));\n\nfunction HigherOrderComponent(props) {\n  const classes = props.classes;\n}\n\nconst styles = theme => ({\n  root: {\n    width: '100%',\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper\n  },\n  root: {\n    flexGrow: 1\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  title: {\n    flexGrow: 1\n  },\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap'\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 240\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 240\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2)\n  }\n});\n\nconst GET_USERS = gql(_templateObject());\n\nclass Edit extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getUserComplete = data => {// this.setState({ selectedGender: data.student.gender, selectCourse: data.student.course._id });\n      // console.log(data.student.gender)\n    };\n\n    this.handleChange = ev => {\n      this.setState({\n        selectedGender: ev.target.value\n      });\n    };\n\n    this.handleChangeCourse = event => {\n      this.setState({\n        selectCourse: event.target.value\n      });\n    };\n\n    this.state = {\n      selectedGender: \"\",\n      selectCourse: \"\"\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          selectedGender = _this$state.selectedGender,\n          selectCourse = _this$state.selectCourse;\n    const classes = this.props.classes;\n    let name, course, rollnumber, address, birth_year, gender;\n    console.log(this.props);\n    return React.createElement(Query, {\n      query: GET_USERS,\n      variables: {\n        Id: this.props.match.params.id\n      },\n      onCompleted: this.getStudentComplete,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, ({\n      loading,\n      error,\n      data\n    }) => {\n      if (loading) return 'Loading...';\n      if (error) return \"Error! \".concat(error.message);\n      return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, \"dfd\") // <Mutation mutation={GET_USERS} key={data.student._id} onCompleted={() => this.props.history.push(`/`)}>\n      //     {(updateStudent, { loading, error }) => (\n      //         <div className=\"container\">\n      //             <Header></Header>\n      //             <AppBar position=\"static\">\n      //                 <Toolbar>\n      //                     <Typography variant=\"h6\">\n      //                         Edit {data.student.name} - Details\n      //                     </Typography>\n      //                 </Toolbar>\n      //             </AppBar>\n      //             <div className=\"buttonBadge\"><Button variant=\"contained\" color=\"default\" href=\"/\" className={\"backBtn\"} >Home</Button></div>\n      //             <div className=\"panel-body\">\n      //                 <form onSubmit={e => {\n      //                     e.preventDefault();\n      //                     updateStudent({ variables: { id: data.student._id, name: this.name.value, course: this.state.selectCourse, rollnumber: this.rollnumber.value, address: this.address.value, gender: this.state.selectedGender, birth_year: parseInt(this.birth_year.value) } });\n      //                     this.name.value = \"\";\n      //                     this.rollnumber.value = \"\";\n      //                     this.selectCourse = \"\";\n      //                     this.address.value = \"\";\n      //                     this.selectedGender = \"\";\n      //                     this.birth_year.value = \"\";\n      //                 }}>\n      //                     <TextField required type=\"number\" InputProps={{ readOnly: true, }} label=\"Rollnumber\" defaultValue={data.student.rollnumber} className={classes.textField} margin=\"normal\" inputRef={el => this.rollnumber = el} /><br />\n      //                     <TextField required label=\"Student Name\" defaultValue={data.student.name} className={classes.textField} margin=\"normal\" inputRef={el => this.name = el} /><br />\n      //                     <FormControl required className={classes.formControl}>\n      //                         <InputLabel htmlFor=\"course-native-required\">Course</InputLabel>\n      //                         <Query pollInterval={500} query={GET_COURSES}>\n      //                             {(cData) => {\n      //                                 if (cData.loading) return 'Loading...';\n      //                                 if (cData.error) return `Error! ${cData.error.message}`;\n      //                                 return (\n      //                                     <NativeSelect\n      //                                         value={this.state.selectCourse}\n      //                                         onChange={this.handleChangeCourse}\n      //                                         name=\"course\"\n      //                                         inputProps={{\n      //                                             id: 'course-native-required',\n      //                                         }}\n      //                                     >\n      //                                         <React.Fragment>\n      //                                             <option value=\"\" ></option>\n      //                                             {cData.data.courses.map((course, index) => (\n      //                                                 <option value={course._id} key={index} >{course.name}</option>\n      //                                             ))}\n      //                                         </React.Fragment>\n      //                                     </NativeSelect>\n      //                                 );\n      //                             }}\n      //                         </Query>\n      //                     </FormControl><br />\n      //                     <TextField required label=\"Address\" id=\"filled-multiline-static\" multiline rows=\"3\" defaultValue={data.student.address} className={classes.textField} margin=\"normal\" inputRef={el => this.address = el} /><br />\n      //                     <TextField required label=\"Birth Year\" type=\"number\" defaultValue={data.student.birth_year} className={classes.textField} margin=\"normal\" inputRef={el => this.birth_year = el} /><br />\n      //                     <div>\n      //                         <FormControl component=\"fieldset\" className={classes.formControl}>\n      //                             <FormLabel type=\"number\" component=\"legend\">Gender</FormLabel>\n      //                             <RadioGroup aria-label=\"gender\" name=\"gender\" onChange={this.handleChange} value={this.state.selectedGender}>\n      //                                 {/* value={value} onChange={handleChange} */}\n      //                                 <FormControlLabel\n      //                                     value=\"F\"\n      //                                     control={<Radio color=\"primary\" />}\n      //                                     label=\"Female\"\n      //                                     labelPlacement=\"start\"\n      //                                 />\n      //                                 <FormControlLabel\n      //                                     value=\"M\"\n      //                                     control={<Radio color=\"primary\" />}\n      //                                     label=\"Male\"\n      //                                     labelPlacement=\"start\"\n      //                                 />\n      //                             </RadioGroup>\n      //                         </FormControl>\n      //                     </div>\n      //                     <button type=\"submit\" className=\"btn btn-success\">Submit</button>\n      //                 </form>\n      //                 {loading && <p>Loading...</p>}\n      //                 {error && <p>Error :( Please try again</p>}\n      //             </div>\n      //         </div>\n      //     )}\n      // </Mutation>\n      ;\n    });\n  }\n\n}\n\nexport default withStyles(styles)(withRouter(Edit));","map":{"version":3,"sources":["/home/sermasundarj/Desktop/rss/packages/react-client/src/components/admincomponent/Edit.js"],"names":["React","Component","Link","withRouter","gql","Query","Mutation","TextField","makeStyles","withStyles","AppBar","Toolbar","Typography","Button","NativeSelect","FormLabel","FormControl","FormControlLabel","Radio","RadioGroup","InputLabel","Select","Header","Content","ContactUs","Footer","useStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","container","display","flexWrap","textField","marginLeft","width","HigherOrderComponent","props","classes","styles","maxWidth","backgroundColor","palette","background","paper","formControl","margin","minWidth","selectEmpty","marginTop","GET_USERS","Edit","constructor","getUserComplete","data","handleChange","ev","setState","selectedGender","target","value","handleChangeCourse","event","selectCourse","state","render","name","course","rollnumber","address","birth_year","gender","console","log","Id","match","params","id","getStudentComplete","loading","error","message"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Link, withRouter } from \"react-router-dom\";\nimport gql from \"graphql-tag\";\nimport { Query, Mutation } from \"react-apollo\";\n\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport NativeSelect from '@material-ui/core/NativeSelect';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport {\n    FormControl,\n    FormControlLabel,\n    Radio,\n    RadioGroup\n} from \"@material-ui/core\";\n\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\n\nimport Header from '../commoncomponent/header';\nimport Content from '../homecomponent/content';\nimport ContactUs from '../homecomponent/contactus';\nimport Footer from '../commoncomponent/footer';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n    container: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    textField: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        width: 240,\n    },\n}));\n\nfunction HigherOrderComponent(props) {\n    const { classes } = props;\n}\n\nconst styles = theme => ({\n    root: {\n        width: '100%',\n        maxWidth: 360,\n        backgroundColor: theme.palette.background.paper,\n    },\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n    container: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    textField: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        width: 240,\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 240,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n})\n\nconst GET_USERS = gql`\n{\n    user(id: \"5e142fd878849a08221947a1\"){\n      name\n    }\n    \n  }\n`;\n\nclass Edit extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { selectedGender: \"\", selectCourse: \"\" };\n    }\n\n    getUserComplete = data => {\n        // this.setState({ selectedGender: data.student.gender, selectCourse: data.student.course._id });\n        // console.log(data.student.gender)\n    }\n\n    handleChange = ev => {\n        this.setState({ selectedGender: ev.target.value });\n    };\n    handleChangeCourse = event => {\n        this.setState({ selectCourse: event.target.value });\n    };\n    render() {\n        const { selectedGender, selectCourse } = this.state;\n        const { classes } = this.props;\n\n        let name, course, rollnumber, address, birth_year, gender;\n        console.log(this.props)\n        return (\n            <Query query={GET_USERS} variables={{ Id: this.props.match.params.id }} onCompleted={this.getStudentComplete}>\n                {({ loading, error, data }) => {\n                    if (loading) return 'Loading...';\n                    if (error) return `Error! ${error.message}`;\n\n                    return (\n                        <p>dfd</p>\n                        // <Mutation mutation={GET_USERS} key={data.student._id} onCompleted={() => this.props.history.push(`/`)}>\n                        //     {(updateStudent, { loading, error }) => (\n                        //         <div className=\"container\">\n                        //             <Header></Header>\n                        //             <AppBar position=\"static\">\n                        //                 <Toolbar>\n                        //                     <Typography variant=\"h6\">\n                        //                         Edit {data.student.name} - Details\n                        //                     </Typography>\n                        //                 </Toolbar>\n                        //             </AppBar>\n                        //             <div className=\"buttonBadge\"><Button variant=\"contained\" color=\"default\" href=\"/\" className={\"backBtn\"} >Home</Button></div>\n                        //             <div className=\"panel-body\">\n\n                        //                 <form onSubmit={e => {\n                        //                     e.preventDefault();\n                        //                     updateStudent({ variables: { id: data.student._id, name: this.name.value, course: this.state.selectCourse, rollnumber: this.rollnumber.value, address: this.address.value, gender: this.state.selectedGender, birth_year: parseInt(this.birth_year.value) } });\n                        //                     this.name.value = \"\";\n                        //                     this.rollnumber.value = \"\";\n                        //                     this.selectCourse = \"\";\n                        //                     this.address.value = \"\";\n                        //                     this.selectedGender = \"\";\n                        //                     this.birth_year.value = \"\";\n                        //                 }}>\n                        //                     <TextField required type=\"number\" InputProps={{ readOnly: true, }} label=\"Rollnumber\" defaultValue={data.student.rollnumber} className={classes.textField} margin=\"normal\" inputRef={el => this.rollnumber = el} /><br />\n                        //                     <TextField required label=\"Student Name\" defaultValue={data.student.name} className={classes.textField} margin=\"normal\" inputRef={el => this.name = el} /><br />\n                        //                     <FormControl required className={classes.formControl}>\n                        //                         <InputLabel htmlFor=\"course-native-required\">Course</InputLabel>\n\n\n                        //                         <Query pollInterval={500} query={GET_COURSES}>\n                        //                             {(cData) => {\n                        //                                 if (cData.loading) return 'Loading...';\n                        //                                 if (cData.error) return `Error! ${cData.error.message}`;\n                        //                                 return (\n                        //                                     <NativeSelect\n                        //                                         value={this.state.selectCourse}\n                        //                                         onChange={this.handleChangeCourse}\n                        //                                         name=\"course\"\n                        //                                         inputProps={{\n                        //                                             id: 'course-native-required',\n                        //                                         }}\n                        //                                     >\n                        //                                         <React.Fragment>\n                        //                                             <option value=\"\" ></option>\n                        //                                             {cData.data.courses.map((course, index) => (\n                        //                                                 <option value={course._id} key={index} >{course.name}</option>\n                        //                                             ))}\n                        //                                         </React.Fragment>\n                        //                                     </NativeSelect>\n                        //                                 );\n                        //                             }}\n                        //                         </Query>\n\n\n                        //                     </FormControl><br />\n                                            \n                        //                     <TextField required label=\"Address\" id=\"filled-multiline-static\" multiline rows=\"3\" defaultValue={data.student.address} className={classes.textField} margin=\"normal\" inputRef={el => this.address = el} /><br />\n                        //                     <TextField required label=\"Birth Year\" type=\"number\" defaultValue={data.student.birth_year} className={classes.textField} margin=\"normal\" inputRef={el => this.birth_year = el} /><br />\n                        //                     <div>\n                        //                         <FormControl component=\"fieldset\" className={classes.formControl}>\n                        //                             <FormLabel type=\"number\" component=\"legend\">Gender</FormLabel>\n                        //                             <RadioGroup aria-label=\"gender\" name=\"gender\" onChange={this.handleChange} value={this.state.selectedGender}>\n                        //                                 {/* value={value} onChange={handleChange} */}\n                        //                                 <FormControlLabel\n                        //                                     value=\"F\"\n                        //                                     control={<Radio color=\"primary\" />}\n                        //                                     label=\"Female\"\n                        //                                     labelPlacement=\"start\"\n                        //                                 />\n                        //                                 <FormControlLabel\n                        //                                     value=\"M\"\n                        //                                     control={<Radio color=\"primary\" />}\n                        //                                     label=\"Male\"\n                        //                                     labelPlacement=\"start\"\n                        //                                 />\n                        //                             </RadioGroup>\n                        //                         </FormControl>\n                        //                     </div>\n                        //                     <button type=\"submit\" className=\"btn btn-success\">Submit</button>\n                        //                 </form>\n                        //                 {loading && <p>Loading...</p>}\n                        //                 {error && <p>Error :( Please try again</p>}\n                        //             </div>\n                        //         </div>\n                        //     )}\n                        // </Mutation>\n                    );\n                }}\n            </Query>\n        );\n    }\n}\nexport default withStyles(styles)(withRouter(Edit));"]},"metadata":{},"sourceType":"module"}